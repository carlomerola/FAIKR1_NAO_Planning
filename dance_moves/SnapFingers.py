# Choregraphe bezier export in Python.
from naoqi import ALProxy
import sys
names = list()
times = list()
keys = list()

names.append("HeadPitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0610099, [3, -0.133333, -0.0477057], [3, 0.133333, 0.0477057]], [0.286234, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0610099, [3, -0.133333, 0], [3, 0.133333, 0]], [0.279502, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0640758, [3, -0.133333, 0], [3, 0.133333, 0]], [0.276569, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0640758, [3, -0.133333, 0], [3, 0.133333, 0]], [0.275776, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0640758, [3, -0.133333, 0.0459626], [3, 0.133333, -0.0459626]], [0, [3, -0.133333, 0], [3, 0, 0]]])

names.append("HeadYaw")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.516617, [3, -0.133333, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LAnklePitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.348738, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.348738, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.352994, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LAnkleRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00558594, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00558594, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00412456, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LElbowRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-1.00723, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.987397, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.990274, [3, -0.133333, 0.00157244], [3, 0.133333, -0.00157244]], [-0.996832, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.996832, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.996832, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.996832, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.996832, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.996832, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.996832, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.00723, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LElbowYaw")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-1.3874, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.968516, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.968808, [3, -0.133333, 0.000291416], [3, 0.133333, -0.000291416]], [-0.972256, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.972256, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.972256, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.972256, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.972256, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.972256, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.972256, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.3874, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LHand")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.244542, [3, -0.133333, 0], [3, 0.133333, 0]], [0.138551, [3, -0.133333, 0], [3, 0.133333, 0]], [0.148264, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142373, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142373, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142373, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142373, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142373, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142373, [3, -0.133333, 0], [3, 0.133333, 0]], [0.142373, [3, -0.133333, 0], [3, 0.133333, 0]], [0.244542, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LHipPitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.448337, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.448337, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LHipRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [0.000286866, [3, -0.133333, 0], [3, 0.133333, 0]], [0.000286866, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00173872, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LHipYawPitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00730469, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00730469, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LKneePitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.697734, [3, -0.133333, 0], [3, 0.133333, 0]], [0.697734, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LShoulderPitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[1.3974, [3, -0.133333, 0], [3, 0.133333, 0]], [0.977337, [3, -0.133333, 0], [3, 0.133333, 0]], [0.97763, [3, -0.133333, -0.000293214], [3, 0.133333, 0.000293214]], [0.981088, [3, -0.133333, 0], [3, 0.133333, 0]], [0.981088, [3, -0.133333, 0], [3, 0.133333, 0]], [0.981088, [3, -0.133333, 0], [3, 0.133333, 0]], [0.981088, [3, -0.133333, 0], [3, 0.133333, 0]], [0.981088, [3, -0.133333, 0], [3, 0.133333, 0]], [0.981088, [3, -0.133333, 0], [3, 0.133333, 0]], [0.981088, [3, -0.133333, 0], [3, 0.133333, 0]], [1.3974, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LShoulderRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.309349, [3, -0.133333, 0], [3, 0.133333, 0]], [0.32327, [3, -0.133333, 0], [3, 0.133333, 0]], [0.323221, [3, -0.133333, 4.8869e-05], [3, 0.133333, -4.8869e-05]], [0.321519, [3, -0.133333, 0], [3, 0.133333, 0]], [0.321519, [3, -0.133333, 0], [3, 0.133333, 0]], [0.321519, [3, -0.133333, 0], [3, 0.133333, 0]], [0.321519, [3, -0.133333, 0], [3, 0.133333, 0]], [0.321519, [3, -0.133333, 0], [3, 0.133333, 0]], [0.321519, [3, -0.133333, 0], [3, 0.133333, 0]], [0.321519, [3, -0.133333, 0], [3, 0.133333, 0]], [0.309349, [3, -0.133333, 0], [3, 0, 0]]])

names.append("LWristYaw")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.0023803, [3, -0.133333, 0], [3, 0.133333, 0]], [0.385391, [3, -0.133333, 0], [3, 0.133333, 0]], [0.37594, [3, -0.133333, 0], [3, 0.133333, 0]], [0.382828, [3, -0.133333, 0], [3, 0.133333, 0]], [0.382828, [3, -0.133333, 0], [3, 0.133333, 0]], [0.382828, [3, -0.133333, 0], [3, 0.133333, 0]], [0.382828, [3, -0.133333, 0], [3, 0.133333, 0]], [0.382828, [3, -0.133333, 0], [3, 0.133333, 0]], [0.382828, [3, -0.133333, 0], [3, 0.133333, 0]], [0.382828, [3, -0.133333, 0], [3, 0.133333, 0]], [0.0023803, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RAnklePitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.358506, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.348738, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.884882, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.351242, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.884882, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.358507, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.877717, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.358507, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.875777, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.358507, [3, -0.133333, -2.66316e-07], [3, 0.133333, 2.66316e-07]], [-0.358506, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RAnkleRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00558594, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00558594, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00412456, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RElbowRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[1.00706, [3, -0.133333, 0], [3, 0.133333, 0]], [0.843401, [3, -0.133333, 0], [3, 0.133333, 0]], [1.5412, [3, -0.133333, 0], [3, 0.133333, 0]], [0.851837, [3, -0.133333, 0], [3, 0.133333, 0]], [1.53736, [3, -0.133333, 0], [3, 0.133333, 0]], [0.85224, [3, -0.133333, 0], [3, 0.133333, 0]], [1.53442, [3, -0.133333, 0], [3, 0.133333, 0]], [0.85224, [3, -0.133333, 0], [3, 0.133333, 0]], [1.53238, [3, -0.133333, 0], [3, 0.133333, 0]], [0.85224, [3, -0.133333, 0], [3, 0.133333, 0]], [1.00706, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RElbowYaw")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[1.38803, [3, -0.133333, 0], [3, 0.133333, 0]], [0.686222, [3, -0.133333, 0], [3, 0.133333, 0]], [1.03604, [3, -0.133333, 0], [3, 0.133333, 0]], [0.667243, [3, -0.133333, 0], [3, 0.133333, 0]], [1.02916, [3, -0.133333, 0], [3, 0.133333, 0]], [0.669792, [3, -0.133333, 0], [3, 0.133333, 0]], [1.02661, [3, -0.133333, 0], [3, 0.133333, 0]], [0.669792, [3, -0.133333, 0], [3, 0.133333, 0]], [1.02468, [3, -0.133333, 0], [3, 0.133333, 0]], [0.669792, [3, -0.133333, 0], [3, 0.133333, 0]], [1.38803, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RHand")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.25, [3, -0.133333, 0], [3, 0.133333, 0]], [0.1671, [3, -0.133333, 0], [3, 0.133333, 0]], [0.58, [3, -0.133333, 0], [3, 0.133333, 0]], [0.17, [3, -0.133333, 0], [3, 0.133333, 0]], [0.58, [3, -0.133333, 0], [3, 0.133333, 0]], [0.175581, [3, -0.133333, 0], [3, 0.133333, 0]], [0.574495, [3, -0.133333, 0], [3, 0.133333, 0]], [0.175581, [3, -0.133333, 0], [3, 0.133333, 0]], [0.573005, [3, -0.133333, 0], [3, 0.133333, 0]], [0.175581, [3, -0.133333, 0], [3, 0.133333, 0]], [0.25, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RHipPitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.448337, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.448337, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.450902, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RHipRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000286866, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000286866, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0.133333, 0]], [0.00428526, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RHipYawPitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00730469, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00730469, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.000901774, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RKneePitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.697734, [3, -0.133333, 0], [3, 0.133333, 0]], [0.697734, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0.133333, 0]], [0.705086, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RShoulderPitch")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[1.39055, [3, -0.133333, 0], [3, 0.133333, 0]], [0.878588, [3, -0.133333, 0], [3, 0.133333, 0]], [0.970766, [3, -0.133333, 0], [3, 0.133333, 0]], [0.889989, [3, -0.133333, 0], [3, 0.133333, 0]], [0.965426, [3, -0.133333, 0], [3, 0.133333, 0]], [0.89287, [3, -0.133333, 0], [3, 0.133333, 0]], [0.957667, [3, -0.133333, 0], [3, 0.133333, 0]], [0.89287, [3, -0.133333, 0], [3, 0.133333, 0]], [0.954989, [3, -0.133333, 0], [3, 0.133333, 0]], [0.89287, [3, -0.133333, 0], [3, 0.133333, 0]], [1.39055, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RShoulderRoll")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.29685, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.219517, [3, -0.133333, -0.0034034], [3, 0.133333, 0.0034034]], [-0.216114, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.225798, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.225798, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.225798, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.225798, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.225798, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.225798, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.225798, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.29685, [3, -0.133333, 0], [3, 0, 0]]])

names.append("RWristYaw")
times.append([0.4, 0.8, 1.2, 1.6, 2, 2.4, 2.8, 3.2, 3.6, 4, 4.4])
keys.append([[-0.00313959, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0444001, [3, -0.133333, 0], [3, 0.133333, 0]], [1.79004, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0335279, [3, -0.133333, 0], [3, 0.133333, 0]], [1.78685, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0324624, [3, -0.133333, 0], [3, 0.133333, 0]], [1.78133, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0324624, [3, -0.133333, 0], [3, 0.133333, 0]], [1.78021, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.0324624, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.00313959, [3, -0.133333, 0], [3, 0, 0]]])

try:
  robotIP = "127.0.0.1"
  port = 9559

  if len(sys.argv) <= 1:
    print "(robotIP default: 127.0.0.1)"
  elif len(sys.argv) <= 2:
    robotIP = sys.argv[1]
  else:
    port = int(sys.argv[2])
    robotIP = sys.argv[1]

  motion = ALProxy("ALMotion",robotIP,port)
  motion.angleInterpolationBezier(names, times, keys)
except BaseException, err:
  print err
